import {
  Component,
  ContentChild,
  Input,
  OnDestroy,
  OnInit,
  TemplateRef,
  ViewEncapsulation,
} from '@angular/core';
import { Router } from '@angular/router';
import { Observable, Subscription } from 'rxjs';
import { BreadcrumbItemDirective } from './breadcrumb-item.directive';
import { BreadcrumbDefinition, BreadcrumbService } from './breadcrumb.service';

@Component({
  selector: 'app-breadcrumb',
  templateUrl: './breadcrumb.component.html',
  encapsulation: ViewEncapsulation.None,
})
export class BreadcrumbComponent implements OnInit, OnDestroy {
  public subscription: Subscription;
  public breadcrumbs: BreadcrumbDefinition[];
  public breadcrumbs$: Observable<BreadcrumbDefinition[]>;
  public separatorTemplate: TemplateRef<void>;
  private _separator = '>';

  /**
   * Breadcrumb item can be customized with this template
   * Template context is provided label, additional info, first and last indexes
   * Use cases:
   * 1) Add an icon along with label
   * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}
   * 3) Change text case {{breadcrumb | titlecase}}
   */
  @ContentChild(BreadcrumbItemDirective, { static: false, read: TemplateRef })
  public itemTemplate;

  /**
   * If true, breadcrumb is auto generated even without any mapping label
   * Default label is same as route segment
   */
  @Input() public autoGenerate = true;

  /**
   * By default query params will be preserved with breadcrumbs
   */
  @Input() public preserveQueryParams = true;

  /**
   * By default query fragments will be preserved with breadcrumbs
   */
  @Input() public preserveFragment = true;

  /**
   * custom class provided by consumer to increase specificity
   * This will benefit to override styles that are conflicting
   */
  @Input() public class = '';

  /**
   * separator between breadcrumbs, defaults to '/'.
   * User can customize separator either by passing a String or Template
   *
   * String --> Ex: <app-breadcrumb separator="-"> </app-breadcrumb>
   *
   * Template --> Ex: <app-breadcrumb [separator]="separatorTemplate"> </app-breadcrumb>
   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
   */
  @Input('separator')
  set separator(value: string | TemplateRef<void>) {
    if (value instanceof TemplateRef) {
      this.separatorTemplate = value;
      this._separator = undefined;
    } else {
      this.separatorTemplate = undefined;
      this._separator = value || '/';
    }
  }
  get separator() {
    return this._separator;
  }

  constructor(
    private breadcrumbService: BreadcrumbService,
    private router: Router
  ) {}

  public ngOnInit() {
    this.subscription = this.breadcrumbService.breadcrumbs$.subscribe(
      (breadcrumbs) => {
        this.breadcrumbs = breadcrumbs.filter((breadcrumb) => {
          // Usually, breadcrumb list can contain a combination of auto generated and user specified labels
          // this filters auto generated labels in case of "[autoGenerate]: false"
          if (this.autoGenerate) {
            return true;
          }
          return !breadcrumb.isAutoGeneratedLabel;
        });
      }
    );
  }
  public ngOnDestroy() {
    this.subscription.unsubscribe();
  }

  public handleRoute(breadcrumb: BreadcrumbDefinition) {
    const routeLink = breadcrumb.routeInterceptor
      ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)
      : breadcrumb.routeLink;
    const { queryParams, fragment } = breadcrumb;
    this.router.navigate([routeLink], { queryParams, fragment });
  }
}
